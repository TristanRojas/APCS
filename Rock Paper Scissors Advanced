package cont;
import javax.swing.JOptionPane;

public class JOP {

	public static void msg(String msg) {
		JOptionPane.showMessageDialog(null, msg);
	}
	
	public static String in(String msg){
		return JOptionPane.showInputDialog(msg);
	}
}

package mod;

public class Main {
    public static void main(String[] args){
        try {
            Game rps = new Game();
        } catch(Exception O){
            System.exit(0);
        }
    }
}

package mod;

import cont.JOP;

public class Game {
    String playerOrComputer;
    boolean running = true;
    Player Player1 = new Player();
    Player Player2 = new Player();
    Player Computer = new Player();

    //Displays menu with the current high score. Creates a playerOrComputer String using the input of the pvp or pvc choice
    public Game() {
        while (true){
            playerOrComputer = JOP.in("**Welcome To Rock, Paper, Scissors!**\nTo select your game mode (player versus player or player versus computer), enter pvp or pvc. Click cancel to quit. \nHigh scores are currently: Player 1: "
                    + Player1.getHighScore() + ", Player 2: " + Player2.getHighScore() + " and Computer: " + Computer.getHighScore());
            update();
        }
    }
    
    //runs game according to players choice, if neither pvp or pvc are entered then you are prompted to enter again.
    public void update(){
        running = true;
        if(playerOrComputer.equalsIgnoreCase("pvp")){
            playerVsPlayer();
        } else if(playerOrComputer.equalsIgnoreCase("pvc")){
            playerVsComputer();
        } else{
            playerOrComputer = "";
            JOP.msg("Enter either pvp or pvc or click cancel to quit.");
        }
    //this is the outcome if player enters pvp, runs the inputGuess methods for both players then checks the winner.
    }
    public void playerVsPlayer(){
        while(running){
            JOP.msg("The current score is " + Player1.getScore() + " for player one, and " + Player2.getScore() + " for player two.");
            JOP.msg("It's player one's turn, make sure player two isn't looking.");
            Player1.inputGuess();
            JOP.msg("It's player two's turn!");
            Player2.inputGuess();
            getWinnerPVP();
            playerOrComputer = "";
        }
    }
    //this is the outcome if player enters pvc, runs the inputGuess method for the player and runs the computerGuess method for the computer then checks the winner.
    public void playerVsComputer(){
        while(running){
            JOP.msg("The current score is " + Player1.getScore() + " for player one, and " + Computer.getScore() + " for computer.");
            JOP.msg("Make your move!");
            Player1.inputGuess();
            JOP.msg("It's the computer's turn!");
            Computer.computerGuess();
            getWinnerPVC();
            playerOrComputer = "";
        }
    }
    //uses the logic of paper beats rock, rock beats scissors, scissors beat paper to determine who wins based on each players choice. Increments the score based on who won.
    //out of a 3 round basis, who ever won the most rounds wins the game, however the number of rounds can change depending on how many ties there are, or even amount of wins on both sides
    public void getWinnerPVP(){
        if(Player1.getGuess().equalsIgnoreCase("rock") && Player2.getGuess().equalsIgnoreCase("paper")){
            Player2.increment();
            JOP.msg("Player one guessed " + Player1.getGuess() + " and player two guessed " + Player2.getGuess() + ". Player two wins this round!");
        } else if(Player1.getGuess().equalsIgnoreCase("paper") && Player2.getGuess().equalsIgnoreCase("scissors")){
            Player2.increment();
            JOP.msg("Player one guessed " + Player1.getGuess() + " and player two guessed " + Player2.getGuess() + ". Player two wins this round!");
        } else if(Player1.getGuess().equalsIgnoreCase("scissors") && Player2.getGuess().equalsIgnoreCase("rock")){
            Player2.increment();
            JOP.msg("Player one guessed " + Player1.getGuess() + " and player two guessed " + Player2.getGuess() + ". Player two wins this round!");
        } else if(Player1.getGuess().equalsIgnoreCase("paper") && Player2.getGuess().equalsIgnoreCase("rock")){
            Player1.increment();
            JOP.msg("Player one guessed " + Player1.getGuess() + " and player two guessed " + Player2.getGuess() + ". Player one wins this round!");
        } else if(Player1.getGuess().equalsIgnoreCase("scissors") && Player2.getGuess().equalsIgnoreCase("paper")){
            Player1.increment();
            JOP.msg("Player one guessed " + Player1.getGuess() + " and player two guessed " + Player2.getGuess() + ". Player one wins this round!");
        } else if(Player1.getGuess().equalsIgnoreCase("rock") && Player2.getGuess().equalsIgnoreCase("scissors")){
            Player1.increment();
            JOP.msg("Player one guessed " + Player1.getGuess() + " and player two guessed " + Player2.getGuess() + ". Player one wins this round!");
        } else{
            JOP.msg("It's a tie! On to the next round.");
        }
        if(Player1.getScore() >= 2){
            Player2.resetHighScore();
            Player2.resetRoundScore();
            Player1.resetRoundScore();
            Player1.incrementHighScore();
            JOP.msg("Player one won the most rounds and thus wins the game!");
            running = false;
        }
        if(Player2.getScore() >= 2){
            Player1.resetHighScore();
            Player1.resetRoundScore();
            Player2.resetRoundScore();
            Player2.incrementHighScore();
            JOP.msg("Player two won the most rounds and thus wins the game!");
            running = false;
        }
    }
    //same logic used for getWinnerPVP, but insteadof a second player, you go against code that randomly selects rock paper or scissors.
    public void getWinnerPVC(){
        if(Player1.getGuess().equalsIgnoreCase("rock") && Computer.getGuess().equalsIgnoreCase("paper")){
            Computer.increment();
            JOP.msg("Player one guessed " + Player1.getGuess() + " and computer guessed " + Computer.getGuess() + ". Computer wins this round!");
        } else if(Player1.getGuess().equalsIgnoreCase("paper") && Computer.getGuess().equalsIgnoreCase("scissors")){
            Computer.increment();
            JOP.msg("Player one guessed " + Player1.getGuess() + " and computer guessed " + Computer.getGuess() + ". Computer wins this round!");
        } else if(Player1.getGuess().equalsIgnoreCase("scissors") && Computer.getGuess().equalsIgnoreCase("rock")){
            Computer.increment();
            JOP.msg("Player one guessed " + Player1.getGuess() + " and computer guessed " + Computer.getGuess() + ". Computer wins this round!");
        } else if(Player1.getGuess().equalsIgnoreCase("paper") && Computer.getGuess().equalsIgnoreCase("rock")){
            Player1.increment();
            JOP.msg("Player one guessed " + Player1.getGuess() + " and computer guessed " + Computer.getGuess() + ". Player one wins this round!");
        } else if(Player1.getGuess().equalsIgnoreCase("scissors") && Computer.getGuess().equalsIgnoreCase("paper")){
            Player1.increment();
            JOP.msg("Player one guessed " + Player1.getGuess() + " and computer guessed " + Computer.getGuess() + ". Player one wins this round!");
        } else if(Player1.getGuess().equalsIgnoreCase("rock") && Computer.getGuess().equalsIgnoreCase("scissors")){
            Player1.increment();
            JOP.msg("Player one guessed " + Player1.getGuess() + " and computer guessed " + Computer.getGuess() + ". Player one wins this round!");
        } else{
            JOP.msg("It's a tie! On to the next round.");
        }
        if(Computer.getScore() >= 2){
            Player1.resetHighScore();
            Player1.resetRoundScore();
            Computer.resetRoundScore();
            Computer.incrementHighScore();
            JOP.msg("The computer won the most rounds and thus wins the game!");
            running = false;
        }
        if(Player1.getScore() >= 2){
            Computer.resetHighScore();
            Computer.resetRoundScore();
            Player1.resetRoundScore();
            Player1.incrementHighScore();
            JOP.msg("Player one won the most rounds and thus wins the game!");
            running = false;
        }
    }
}

package mod;

import java.util.Random;

import cont.JOP;
//contains the info for the Player
public class Player {
    private String guess;
    private int roundScore;
    private int highScore;
    //sets scores to 0 to start new round
    public Player() {
        roundScore = 0;
        highScore = 0;
    }

    public int getScore() {return roundScore;}
    public int getHighScore() {return highScore;}

    public void increment() { roundScore++; }

    public void incrementHighScore(){ highScore += 1; }

    public void resetRoundScore(){ roundScore = 0; }

    public void resetHighScore(){
        highScore = 0;
    }

    Random random = new Random();
    //gets the user to guess between rock paper or scissors
    public void inputGuess(){
        boolean valid = false; //Variable that becomes true if the string input is correct
        while(!valid) {
            guess = JOP.in("Enter rock, paper or scissors.");
            if (!guess.equalsIgnoreCase("rock") && !guess.equalsIgnoreCase("paper") && !guess.equalsIgnoreCase("scissors")) {
                JOP.msg("Are you kidding man? I gave you THREE options. It's not that hard to type any of them and press enter. Try again.");
            } else {
                valid = true;
            }
        }
    }
    public void computerGuess(){
        //0 is rock, 1 is paper, 2 is scissors
        int computerNum = random.nextInt(2);
        if(computerNum == 0){ guess = "rock"; }
        else if(computerNum == 1){ guess = "paper"; }
        else { guess = "scissors"; }
    }
    public String getGuess(){
        return this.guess;
    }

}

package mod;

public class Score {
    private int score;
    private int highScore;
    
    public Score() {
        score = 0;
        highScore = 0;
    }
    
    public int getScore() {return score;}
    public int getHighScore() {return highScore;}
    
    //increments the score and checks if the score is greater than highscore, if it is then set the highscore to the current score.
    public boolean increment() {
        boolean temp = true;
        if(temp) {
            score++;
            if(score > highScore) {
            highScore = score;
        }    
            return true;
        }
        highScore = 0;
        return false;
    }
}
